package rachacuca;

import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

public class RachaCuca {

    public static int menu() {
        Scanner t = new Scanner(System.in);
        int opcao = -1;
        do {
            System.out.println("Ola jogador(a)! Seja bem-vindo(a) ao Racha-Cuca!\nMenu Inicial:\nSair(0).\nIniciar(1).\nTutorial(2).");
            try {
                opcao = t.nextInt(); // capturarndo a entrada numérica do usuário
                if (opcao > 2 || opcao < 0) {
                    System.out.println("Opcao invalida. Tente novamente!\n");
                }
            } catch (InputMismatchException e) {
                // Captura exceção caso o usuário digite algo que não seja um número
                System.out.println("Entrada invalida! Digite um numero (0, 1 ou 2).\n");
                t.next(); // Limpa a entrada inválida           
            }

        } while (opcao > 2 || opcao < 0);

        return opcao;
    }

    public static void imprimirTabuleiro(String[][] tabuleiro) {
        for (String[] tabuleiro1 : tabuleiro) {
            // Itera sobre as linhas
            for (int j = 0; j < tabuleiro.length; j++) {
                // Usa o comprimento da linha atual para iterar sobre as colunas
                System.out.print(tabuleiro1[j] + " ");
            }
            System.out.println(); // Nova linha após cada linha do tabuleiro
        }
    }

    public static String verificarEspacoVazio(String[][] tabuleiro) {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (tabuleiro[i][j].equals(" ")) {
                    // Usar uma String normal para construir a pergunta
                    String pergunta = "Qual numero voce deseja movimentar? ";
                    // Verifica as peças adjacentes e constrói a pergunta
                    if (i > 0) { // Acima
                        pergunta += tabuleiro[i - 1][j] + " "; // Concatena
                    }
                    if (i < 2) { // Abaixo
                        pergunta += tabuleiro[i + 1][j] + " "; // Concatena
                    }
                    if (j > 0) { // Esquerda
                        pergunta += tabuleiro[i][j - 1] + " "; // Concatena
                    }
                    if (j < 2) { // Direita
                        pergunta += tabuleiro[i][j + 1] + " "; // Concatena
                    }
                    System.out.print(pergunta.trim() + ": ");
                    return new Scanner(System.in).nextLine(); // Retorna o movimento escolhido
                }
            }
        }
        return "";
    }

    public static void main(String[] args) {
        Scanner t = new Scanner(System.in);

        //Criando o tabuleiro do tipo String, estatico. 
        String[][] tabuleiro = {
            {"1", "2", "3"}, {"4", "5", "6"}, {"7", "8", " "}};
        double nivel, embaralhadas = 0;
        int inicio = menu();
        if (inicio == 0) {
            System.out.println("Voce saiu do RACHA-CUCA! Obrigado(a) por jogar.");
            System.exit(0); // Comando para encerar o programa.
        }
        if (inicio == 1) {
            System.out.println("Tabuleiro Ordenado!");
            imprimirTabuleiro(tabuleiro);
            do {
                System.out.println("Digite o nivel de dificuldade para embaralhar: \nFacil(1)\nMedio(2)\nDificl(3)");
                nivel = t.nextDouble();
                if (nivel >= 1 || nivel <= 3) {
                    embaralhadas = Math.pow(2, nivel) * 10;
                }
                if (nivel < 1 || nivel > 3) {
                    System.out.println("NIVEL INFORMADO INVALIDO! \n");
                }
            } while (nivel < 1 || nivel > 3);
        }
        if (inicio == 2) {
            System.out.println("""
                               Ola jogador(a)! Seja bem-vindo(a) ao tutorial do Racha-Cuca!
                               Aqui iremos te ensinar a maneira de concluir nosso tabuleiro com exito! Primeiro vamos te informar de alguns adendos.
                               O objetivo principal do jogo eh ordenar o tabuleiro da maneira como ele eh apresentado, Apos voce iniciar o Racha cuca.
                               Para sair do jogo, basta clicar no numero 0, logo no menu inicial.
                               *Sobre o nivel escolhido para sua partida:
                               Temos 3 niveis, que para selecionar o nivel desejado voce apertara o numero que esta a frente do nivel.
                               Exemplo:\n1- para nivel FACIL\n2- para nivel MEDIO\n3- para nivel DIFICIL.
                               Obs: Se voce selecionar um numero diferente o programa ira informa que o nivel eh invalido!!!
                               As diferencas dos niveis eh a quantidade de embaralhadas que o tabuleiro recebera.
                               O nivel FACIL ira ser embaralhada 20 vezes\nO nivel MEDIO ira ser embaralhado 40 vezes\nO nivel DIFICIL sera embaralhado 80 vezes.
                               Sobre os movimentos: Voce poderar mover somente pecas adjacente ao espaco vazio. Ou seja pecas que sejam "vizinhas" ao espaco vazio
                               Sera contabilizado quantos movimentos voce realizou para ordenar o tabuleiro, voce sera informado de cada movimento realizado.
                               Apos a conclusao da ordenacao do tabuleiro voce ganhara o jogo!
                               Boa sorte e uma otima jogatina!!!! """);
            System.exit(0); // Comando para encerar o programa.
        }

        // Criando uma regra de movimento para embaralhar o tabuleiro.
        Random random = new Random();
        int[][] movimentos = {{0, -1}, {0, 1}, {1, 0}, {-1, 0}};
        int linhaVazia = 2, colunaVazia = 2;
        for (int embaralhar = 0; embaralhar < embaralhadas; embaralhar++) {
            int[] movimento = movimentos[random.nextInt(4)];
            int novaLinhaVazia = linhaVazia + movimento[0];
            int novaColunaVazia = colunaVazia + movimento[1];
            if (novaLinhaVazia < 3 && novaColunaVazia < 3 && novaLinhaVazia >= 0 && novaColunaVazia >= 0) {
                String tabuleiroTemporario = tabuleiro[linhaVazia][colunaVazia];
                tabuleiro[linhaVazia][colunaVazia] = tabuleiro[novaLinhaVazia][novaColunaVazia];
                tabuleiro[novaLinhaVazia][novaColunaVazia] = tabuleiroTemporario;
                // Atualizando a posição vazia
                linhaVazia = novaLinhaVazia;
                colunaVazia = novaColunaVazia;
            }
        }
        int cont = 0;
        do {
            String movimento, guardar;//VALIDAR O MOVIMENTO E GUARDAR A STRING.
            boolean movimentoValido = false;

            //FAZENDO O MOVIMENTO DAS PECAS QUANDO O ESPACO VAGO ESTA EM [0][0]. DE INICIO PARA FILEIRA DE CIMA, 1 Loop de repeticao. LINHA SUPERIOR
            System.out.println("");
            imprimirTabuleiro(tabuleiro);
            movimento = verificarEspacoVazio(tabuleiro);

            if (tabuleiro[0][0].equals(" ")) {
                if (movimento.equals(tabuleiro[0][1])) {
                    guardar = tabuleiro[0][1]; // guardar o valor do espaco que ira receber o espaco vazio 
                    tabuleiro[0][1] = tabuleiro[0][0];// trocando o espaco vazio de lugar com o vaor sugerido pelo o usuario 
                    tabuleiro[0][0] = guardar;// resganto o valor do espaco preenchido para que nao tenha dois espaco vazio no tabuleiro.
                    movimentoValido = true;
                } else if (movimento.equals(tabuleiro[1][0])) {
                    guardar = tabuleiro[1][0];
                    tabuleiro[1][0] = tabuleiro[0][0];
                    tabuleiro[0][0] = guardar;
                    movimentoValido = true;
                }
            } //FAZENDO O MOVIMENTO DAS PECAS QUANDO O ESPACO VAGO ESTA EM [0][1]. 2 Loop de repeticao. LINHA SUPERIOR
            else if (tabuleiro[0][1].equals(" ")) {
                if (movimento.equals(tabuleiro[0][0])) {
                    guardar = tabuleiro[0][0];
                    tabuleiro[0][0] = tabuleiro[0][1];
                    tabuleiro[0][1] = guardar;
                    movimentoValido = true;
                } else if (movimento.equals(tabuleiro[0][2])) {
                    guardar = tabuleiro[0][2];
                    tabuleiro[0][2] = tabuleiro[0][1];
                    tabuleiro[0][1] = guardar;
                    movimentoValido = true;
                } else if (movimento.equals(tabuleiro[1][1])) {
                    guardar = tabuleiro[1][1];
                    tabuleiro[1][1] = tabuleiro[0][1];
                    tabuleiro[0][1] = guardar;
                    movimentoValido = true;
                }
            } //FAZENDO O MOVIMENTO DAS PECAS QUANDO O ESPACO VAGO ESTA EM [0][2]. 3 Loop de repeticao. LINHA SUPERIOR 
            else if (tabuleiro[0][2].equals(" ")) {
                if (movimento.equals(tabuleiro[0][1])) {
                    guardar = tabuleiro[0][1];
                    tabuleiro[0][1] = tabuleiro[0][2];
                    tabuleiro[0][2] = guardar;
                    movimentoValido = true;
                } else if (movimento.equals(tabuleiro[1][2])) {
                    guardar = tabuleiro[1][2];
                    tabuleiro[1][2] = tabuleiro[0][2];
                    tabuleiro[0][2] = guardar;
                    movimentoValido = true;

                }
            } else if (tabuleiro[1][0].equals(" ")) {
                if (movimento.equals(tabuleiro[0][0])) {
                    guardar = tabuleiro[0][0];
                    tabuleiro[0][0] = tabuleiro[1][0];
                    tabuleiro[1][0] = guardar;
                    movimentoValido = true;
                } else if (movimento.equals(tabuleiro[1][1])) {
                    guardar = tabuleiro[1][1];
                    tabuleiro[1][1] = tabuleiro[1][0];
                    tabuleiro[1][0] = guardar;
                    movimentoValido = true;
                } else if (movimento.equals(tabuleiro[2][0])) {
                    guardar = tabuleiro[2][0];
                    tabuleiro[2][0] = tabuleiro[1][0];
                    tabuleiro[1][0] = guardar;
                    movimentoValido = true;
                }
            } //FAZENDO O MOVIMENTO DAS PECAS QUANDO O ESPACO VAGO ESTA EM [1][1]. 5 Loop de repeticao. LINHA CENTRAL
            else if (tabuleiro[1][1].equals(" ")) {
                if (movimento.equals(tabuleiro[0][1])) {
                    guardar = tabuleiro[0][1];
                    tabuleiro[0][1] = tabuleiro[1][1];
                    tabuleiro[1][1] = guardar;
                    movimentoValido = true;
                } else if (movimento.equals(tabuleiro[1][0])) {
                    guardar = tabuleiro[1][0];
                    tabuleiro[1][0] = tabuleiro[1][1];
                    tabuleiro[1][1] = guardar;
                    movimentoValido = true;
                } else if (movimento.equals(tabuleiro[1][2])) {
                    guardar = tabuleiro[1][2];
                    tabuleiro[1][2] = tabuleiro[1][1];
                    tabuleiro[1][1] = guardar;
                    movimentoValido = true;
                } else if (movimento.equals(tabuleiro[2][1])) {
                    guardar = tabuleiro[2][1];
                    tabuleiro[2][1] = tabuleiro[1][1];
                    tabuleiro[1][1] = guardar;
                    movimentoValido = true;
                }
            } //FAZENDO O MOVIMENTO DAS PECAS QUANDO O ESPACO VAGO ESTA EM [1][2]. 6 Loop de repeticao. LINHA CENTRAL
            else if (tabuleiro[1][2].equals(" ")) {
                if (movimento.equals(tabuleiro[0][2])) {
                    guardar = tabuleiro[0][2];
                    tabuleiro[0][2] = tabuleiro[1][2];
                    tabuleiro[1][2] = guardar;
                    movimentoValido = true;
                } else if (movimento.equals(tabuleiro[1][1])) {
                    guardar = tabuleiro[1][1];
                    tabuleiro[1][1] = tabuleiro[1][2];
                    tabuleiro[1][2] = guardar;
                    movimentoValido = true;
                } else if (movimento.equals(tabuleiro[2][2])) {
                    guardar = tabuleiro[2][2];
                    tabuleiro[2][2] = tabuleiro[1][2];
                    tabuleiro[1][2] = guardar;
                    movimentoValido = true;
                }
            } //FAZENDO O MOVIMENTO DAS PECAS QUANDO O ESPACO VAGO ESTA EM [2][0]. 7 Loop de repeticao. LINHA INFERIOR
            else if (tabuleiro[2][0].equals(" ")) {
                if (movimento.equals(tabuleiro[1][0])) {
                    guardar = tabuleiro[1][0];
                    tabuleiro[1][0] = tabuleiro[2][0];
                    tabuleiro[2][0] = guardar;
                    movimentoValido = true;
                } else if (movimento.equals(tabuleiro[2][1])) {
                    guardar = tabuleiro[2][1];
                    tabuleiro[2][1] = tabuleiro[2][0];
                    tabuleiro[2][0] = guardar;
                    movimentoValido = true;
                }

            } //FAZENDO O MOVIMENTO DAS PECAS QUANDO O ESPACO VAGO ESTA EM [2][1]. 8 Loop de repeticao. LINHA INFERIOR
            else if (tabuleiro[2][1].equals(" ")) {
                if (movimento.equals(tabuleiro[1][1])) {
                    guardar = tabuleiro[1][1];
                    tabuleiro[1][1] = tabuleiro[2][1];
                    tabuleiro[2][1] = guardar;
                    movimentoValido = true;
                } else if (movimento.equals(tabuleiro[2][0])) {
                    guardar = tabuleiro[2][0];
                    tabuleiro[2][0] = tabuleiro[2][1];
                    tabuleiro[2][1] = guardar;
                    movimentoValido = true;
                } else if (movimento.equals(tabuleiro[2][2])) {
                    guardar = tabuleiro[2][2];
                    tabuleiro[2][2] = tabuleiro[2][1];
                    tabuleiro[2][1] = guardar;
                    movimentoValido = true;
                }
            } //FAZENDO O MOVIMENTO DAS PECAS QUANDO O ESPACO VAGO ESTA EM [2][2]. 9 Loop de repeticao. LINHA INFERIOR
            else if (tabuleiro[2][2].equals(" ")) {
                if (movimento.equals(tabuleiro[1][2])) {
                    guardar = tabuleiro[1][2];
                    tabuleiro[1][2] = tabuleiro[2][2];
                    tabuleiro[2][2] = guardar;
                    movimentoValido = true;
                } else if (movimento.equals(tabuleiro[2][1])) {
                    guardar = tabuleiro[2][1];
                    tabuleiro[2][1] = tabuleiro[2][2];
                    tabuleiro[2][2] = guardar;
                    movimentoValido = true;
                }
            }
            if (!movimentoValido && !movimento.isEmpty()) {
                System.out.println("nao e possivel mover a peca: " + movimento);
            }
            if (movimentoValido) {
                cont++;
                System.out.println("Quantidade de jogadas ate agora: " + cont);
            }
        } while (!tabuleiro[0][0].equals("1") || !tabuleiro[0][1].equals("2") || !tabuleiro[0][2].equals("3") || !tabuleiro[1][0].equals("4") || !tabuleiro[1][1].equals("5") || !tabuleiro[1][2].equals("6") || !tabuleiro[2][0].equals("7") || !tabuleiro[2][1].equals("8") || !tabuleiro[2][2].equals(" "));
        imprimirTabuleiro(tabuleiro);
        System.out.println("PARABENS!!! VOCE COMPLETOU O QUEBRA-CABECA COM " + cont + "MOVIMENTOS");
    }
}
